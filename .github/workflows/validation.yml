name: Validation

on:
  push:
    branches:
      - main
  pull_request:

# Cancel already running workflows if new ones are scheduled
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Make sure pip caches dependencies and installs as user
  PIP_NO_CACHE_DIR: false
  PIP_USER: 1

  # Make sure poetry won't use virtual environments
  POETRY_VIRTUALENVS_CREATE: false

  # Specify paths here, so we know what to cache
  POETRY_CACHE_DIR: ${{ github.workspace }}/.cache/py-user-base
  PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
  PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit-cache

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Add custom PYTHONUSERBASE to PATH
        run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

      - name: Set up Python
        id: python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10.4"

      # Cache python dependencies so that unless we change them,
      # we won't need to reinstall them with each workflow run.
      # The key is a composite of multiple values, which when changed
      # the cache won't be restored in order to make updating possible
      - name: Python dependency caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
                ${{ steps.python.outputs.python-version }}-\
                ${{ hashFiles('./pyproject.toml', './poetry.lock') }}"

      # In case the dependencies weren't restored, install them
      - name: Install dependencies using poetry
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          pip install poetry
          poetry install

      # Cache pre-commit environment
      # The key is a composite of multiple values, which when changed
      # the cache won't be restored in order to make updating possible
      - name: Pre-commit Environment Caching
        uses: actions/cache@v2
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: "precommit-0-${{ runner.os }}-${{ env.PRE_COMMIT_HOME }}-\
                ${{ steps.python.outputs.python-version }}-\
                ${{ hashFiles('./.pre-commit-config.yaml') }}"

      # Run the actual linting steps here:

      # We skip the major hooks here, because we want to see their output, and
      # success status separately in another task. They are ran below.
      - name: Run general pre-commit hooks
        run: PIP_USER=0; SKIP=flake8,black,isort,pyright pre-commit run --all-files

      - name: Run flake8 linter
        run: flake8 .

      - name: Run black formatter (check)
        run: black --check .

      - name: Run isort import formatter (check)
        run: isort --check .

      - name: Run pyright type checker
        run: pyright -v $PYTHONUSERBASE
